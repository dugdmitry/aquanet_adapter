// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aquanet.message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "aquanet.message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* AquanetMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AquanetMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AquanetMessage_VehicleClass_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_aquanet_2emessage_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_aquanet_2emessage_2eproto() {
  protobuf_AddDesc_aquanet_2emessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "aquanet.message.proto");
  GOOGLE_CHECK(file != NULL);
  AquanetMessage_descriptor_ = file->message_type(0);
  static const int AquanetMessage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AquanetMessage, ros_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AquanetMessage, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AquanetMessage, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AquanetMessage, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AquanetMessage, body_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AquanetMessage, veh_class_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AquanetMessage, battery_ok_),
  };
  AquanetMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AquanetMessage_descriptor_,
      AquanetMessage::default_instance_,
      AquanetMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AquanetMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(AquanetMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AquanetMessage, _internal_metadata_),
      -1);
  AquanetMessage_VehicleClass_descriptor_ = AquanetMessage_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_aquanet_2emessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AquanetMessage_descriptor_, &AquanetMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_aquanet_2emessage_2eproto() {
  delete AquanetMessage::default_instance_;
  delete AquanetMessage_reflection_;
}

void protobuf_AddDesc_aquanet_2emessage_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_aquanet_2emessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::dccl::protobuf_AddDesc_dccl_2foption_5fextensions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025aquanet.message.proto\032\034dccl/option_ext"
    "ensions.proto\"\304\002\n\016AquanetMessage\022+\n\nros_"
    "msg_id\030\001 \002(\rB\027\242\?\024 \001)\000\000\000\000\000\000\000\0001\000\000\000\000\000\000$@\022\"\n"
    "\001x\030\002 \001(\001B\027\242\?\024 \001)\000\000\000\000\000\000$\3001\000\000\000\000\000\000$@\022\"\n\001y\030\003"
    " \001(\001B\027\242\?\024 \001)\000\000\000\000\000\000$\3001\000\000\000\000\000\000$@\022\"\n\001z\030\004 \001(\001"
    "B\027\242\?\024 \001)\000\000\000\000\000\000$\3001\000\000\000\000\000\000$@\022\034\n\014body_messag"
    "e\030\005 \001(\tB\006\242\?\003H\310\001\022/\n\tveh_class\030\006 \001(\0162\034.Aqu"
    "anetMessage.VehicleClass\022\022\n\nbattery_ok\030\007"
    " \001(\010\"*\n\014VehicleClass\022\007\n\003AUV\020\001\022\007\n\003USV\020\002\022\010"
    "\n\004SHIP\020\003:\n\242\?\007\010\001\020\200\002(\003", 380);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "aquanet.message.proto", &protobuf_RegisterTypes);
  AquanetMessage::default_instance_ = new AquanetMessage();
  AquanetMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_aquanet_2emessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_aquanet_2emessage_2eproto {
  StaticDescriptorInitializer_aquanet_2emessage_2eproto() {
    protobuf_AddDesc_aquanet_2emessage_2eproto();
  }
} static_descriptor_initializer_aquanet_2emessage_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* AquanetMessage_VehicleClass_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AquanetMessage_VehicleClass_descriptor_;
}
bool AquanetMessage_VehicleClass_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AquanetMessage_VehicleClass AquanetMessage::AUV;
const AquanetMessage_VehicleClass AquanetMessage::USV;
const AquanetMessage_VehicleClass AquanetMessage::SHIP;
const AquanetMessage_VehicleClass AquanetMessage::VehicleClass_MIN;
const AquanetMessage_VehicleClass AquanetMessage::VehicleClass_MAX;
const int AquanetMessage::VehicleClass_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AquanetMessage::kRosMsgIdFieldNumber;
const int AquanetMessage::kXFieldNumber;
const int AquanetMessage::kYFieldNumber;
const int AquanetMessage::kZFieldNumber;
const int AquanetMessage::kBodyMessageFieldNumber;
const int AquanetMessage::kVehClassFieldNumber;
const int AquanetMessage::kBatteryOkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AquanetMessage::AquanetMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AquanetMessage)
}

void AquanetMessage::InitAsDefaultInstance() {
}

AquanetMessage::AquanetMessage(const AquanetMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AquanetMessage)
}

void AquanetMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ros_msg_id_ = 0u;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  body_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  veh_class_ = 1;
  battery_ok_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AquanetMessage::~AquanetMessage() {
  // @@protoc_insertion_point(destructor:AquanetMessage)
  SharedDtor();
}

void AquanetMessage::SharedDtor() {
  body_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void AquanetMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AquanetMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AquanetMessage_descriptor_;
}

const AquanetMessage& AquanetMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aquanet_2emessage_2eproto();
  return *default_instance_;
}

AquanetMessage* AquanetMessage::default_instance_ = NULL;

AquanetMessage* AquanetMessage::New(::google::protobuf::Arena* arena) const {
  AquanetMessage* n = new AquanetMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AquanetMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AquanetMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AquanetMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AquanetMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(x_, ros_msg_id_);
    z_ = 0;
    if (has_body_message()) {
      body_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    veh_class_ = 1;
    battery_ok_ = false;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AquanetMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AquanetMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ros_msg_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ros_msg_id_)));
          set_has_ros_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_x;
        break;
      }

      // optional double x = 2;
      case 2: {
        if (tag == 17) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_y;
        break;
      }

      // optional double y = 3;
      case 3: {
        if (tag == 25) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_z;
        break;
      }

      // optional double z = 4;
      case 4: {
        if (tag == 33) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_body_message;
        break;
      }

      // optional string body_message = 5;
      case 5: {
        if (tag == 42) {
         parse_body_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_body_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->body_message().data(), this->body_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "AquanetMessage.body_message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_veh_class;
        break;
      }

      // optional .AquanetMessage.VehicleClass veh_class = 6;
      case 6: {
        if (tag == 48) {
         parse_veh_class:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AquanetMessage_VehicleClass_IsValid(value)) {
            set_veh_class(static_cast< ::AquanetMessage_VehicleClass >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_battery_ok;
        break;
      }

      // optional bool battery_ok = 7;
      case 7: {
        if (tag == 56) {
         parse_battery_ok:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &battery_ok_)));
          set_has_battery_ok();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AquanetMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AquanetMessage)
  return false;
#undef DO_
}

void AquanetMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AquanetMessage)
  // required uint32 ros_msg_id = 1;
  if (has_ros_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ros_msg_id(), output);
  }

  // optional double x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->x(), output);
  }

  // optional double y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->y(), output);
  }

  // optional double z = 4;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->z(), output);
  }

  // optional string body_message = 5;
  if (has_body_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->body_message().data(), this->body_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AquanetMessage.body_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->body_message(), output);
  }

  // optional .AquanetMessage.VehicleClass veh_class = 6;
  if (has_veh_class()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->veh_class(), output);
  }

  // optional bool battery_ok = 7;
  if (has_battery_ok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->battery_ok(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AquanetMessage)
}

::google::protobuf::uint8* AquanetMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AquanetMessage)
  // required uint32 ros_msg_id = 1;
  if (has_ros_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ros_msg_id(), target);
  }

  // optional double x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->x(), target);
  }

  // optional double y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->y(), target);
  }

  // optional double z = 4;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->z(), target);
  }

  // optional string body_message = 5;
  if (has_body_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->body_message().data(), this->body_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AquanetMessage.body_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->body_message(), target);
  }

  // optional .AquanetMessage.VehicleClass veh_class = 6;
  if (has_veh_class()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->veh_class(), target);
  }

  // optional bool battery_ok = 7;
  if (has_battery_ok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->battery_ok(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AquanetMessage)
  return target;
}

int AquanetMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AquanetMessage)
  int total_size = 0;

  // required uint32 ros_msg_id = 1;
  if (has_ros_msg_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ros_msg_id());
  }
  if (_has_bits_[1 / 32] & 126u) {
    // optional double x = 2;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 3;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 4;
    if (has_z()) {
      total_size += 1 + 8;
    }

    // optional string body_message = 5;
    if (has_body_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->body_message());
    }

    // optional .AquanetMessage.VehicleClass veh_class = 6;
    if (has_veh_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->veh_class());
    }

    // optional bool battery_ok = 7;
    if (has_battery_ok()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AquanetMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AquanetMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AquanetMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AquanetMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AquanetMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AquanetMessage)
    MergeFrom(*source);
  }
}

void AquanetMessage::MergeFrom(const AquanetMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AquanetMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ros_msg_id()) {
      set_ros_msg_id(from.ros_msg_id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_body_message()) {
      set_has_body_message();
      body_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_message_);
    }
    if (from.has_veh_class()) {
      set_veh_class(from.veh_class());
    }
    if (from.has_battery_ok()) {
      set_battery_ok(from.battery_ok());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AquanetMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AquanetMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AquanetMessage::CopyFrom(const AquanetMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AquanetMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AquanetMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AquanetMessage::Swap(AquanetMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AquanetMessage::InternalSwap(AquanetMessage* other) {
  std::swap(ros_msg_id_, other->ros_msg_id_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  body_message_.Swap(&other->body_message_);
  std::swap(veh_class_, other->veh_class_);
  std::swap(battery_ok_, other->battery_ok_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AquanetMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AquanetMessage_descriptor_;
  metadata.reflection = AquanetMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AquanetMessage

// required uint32 ros_msg_id = 1;
bool AquanetMessage::has_ros_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AquanetMessage::set_has_ros_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
void AquanetMessage::clear_has_ros_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void AquanetMessage::clear_ros_msg_id() {
  ros_msg_id_ = 0u;
  clear_has_ros_msg_id();
}
 ::google::protobuf::uint32 AquanetMessage::ros_msg_id() const {
  // @@protoc_insertion_point(field_get:AquanetMessage.ros_msg_id)
  return ros_msg_id_;
}
 void AquanetMessage::set_ros_msg_id(::google::protobuf::uint32 value) {
  set_has_ros_msg_id();
  ros_msg_id_ = value;
  // @@protoc_insertion_point(field_set:AquanetMessage.ros_msg_id)
}

// optional double x = 2;
bool AquanetMessage::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AquanetMessage::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
void AquanetMessage::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
void AquanetMessage::clear_x() {
  x_ = 0;
  clear_has_x();
}
 double AquanetMessage::x() const {
  // @@protoc_insertion_point(field_get:AquanetMessage.x)
  return x_;
}
 void AquanetMessage::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:AquanetMessage.x)
}

// optional double y = 3;
bool AquanetMessage::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AquanetMessage::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
void AquanetMessage::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
void AquanetMessage::clear_y() {
  y_ = 0;
  clear_has_y();
}
 double AquanetMessage::y() const {
  // @@protoc_insertion_point(field_get:AquanetMessage.y)
  return y_;
}
 void AquanetMessage::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:AquanetMessage.y)
}

// optional double z = 4;
bool AquanetMessage::has_z() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AquanetMessage::set_has_z() {
  _has_bits_[0] |= 0x00000008u;
}
void AquanetMessage::clear_has_z() {
  _has_bits_[0] &= ~0x00000008u;
}
void AquanetMessage::clear_z() {
  z_ = 0;
  clear_has_z();
}
 double AquanetMessage::z() const {
  // @@protoc_insertion_point(field_get:AquanetMessage.z)
  return z_;
}
 void AquanetMessage::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:AquanetMessage.z)
}

// optional string body_message = 5;
bool AquanetMessage::has_body_message() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AquanetMessage::set_has_body_message() {
  _has_bits_[0] |= 0x00000010u;
}
void AquanetMessage::clear_has_body_message() {
  _has_bits_[0] &= ~0x00000010u;
}
void AquanetMessage::clear_body_message() {
  body_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_body_message();
}
 const ::std::string& AquanetMessage::body_message() const {
  // @@protoc_insertion_point(field_get:AquanetMessage.body_message)
  return body_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AquanetMessage::set_body_message(const ::std::string& value) {
  set_has_body_message();
  body_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AquanetMessage.body_message)
}
 void AquanetMessage::set_body_message(const char* value) {
  set_has_body_message();
  body_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AquanetMessage.body_message)
}
 void AquanetMessage::set_body_message(const char* value, size_t size) {
  set_has_body_message();
  body_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AquanetMessage.body_message)
}
 ::std::string* AquanetMessage::mutable_body_message() {
  set_has_body_message();
  // @@protoc_insertion_point(field_mutable:AquanetMessage.body_message)
  return body_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AquanetMessage::release_body_message() {
  // @@protoc_insertion_point(field_release:AquanetMessage.body_message)
  clear_has_body_message();
  return body_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AquanetMessage::set_allocated_body_message(::std::string* body_message) {
  if (body_message != NULL) {
    set_has_body_message();
  } else {
    clear_has_body_message();
  }
  body_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body_message);
  // @@protoc_insertion_point(field_set_allocated:AquanetMessage.body_message)
}

// optional .AquanetMessage.VehicleClass veh_class = 6;
bool AquanetMessage::has_veh_class() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void AquanetMessage::set_has_veh_class() {
  _has_bits_[0] |= 0x00000020u;
}
void AquanetMessage::clear_has_veh_class() {
  _has_bits_[0] &= ~0x00000020u;
}
void AquanetMessage::clear_veh_class() {
  veh_class_ = 1;
  clear_has_veh_class();
}
 ::AquanetMessage_VehicleClass AquanetMessage::veh_class() const {
  // @@protoc_insertion_point(field_get:AquanetMessage.veh_class)
  return static_cast< ::AquanetMessage_VehicleClass >(veh_class_);
}
 void AquanetMessage::set_veh_class(::AquanetMessage_VehicleClass value) {
  assert(::AquanetMessage_VehicleClass_IsValid(value));
  set_has_veh_class();
  veh_class_ = value;
  // @@protoc_insertion_point(field_set:AquanetMessage.veh_class)
}

// optional bool battery_ok = 7;
bool AquanetMessage::has_battery_ok() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void AquanetMessage::set_has_battery_ok() {
  _has_bits_[0] |= 0x00000040u;
}
void AquanetMessage::clear_has_battery_ok() {
  _has_bits_[0] &= ~0x00000040u;
}
void AquanetMessage::clear_battery_ok() {
  battery_ok_ = false;
  clear_has_battery_ok();
}
 bool AquanetMessage::battery_ok() const {
  // @@protoc_insertion_point(field_get:AquanetMessage.battery_ok)
  return battery_ok_;
}
 void AquanetMessage::set_battery_ok(bool value) {
  set_has_battery_ok();
  battery_ok_ = value;
  // @@protoc_insertion_point(field_set:AquanetMessage.battery_ok)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
